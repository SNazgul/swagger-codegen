using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using {{packageName}}.Client;
{{#hasImport}}using {{packageName}}.{{modelPackage}};
{{/hasImport}}
using System.Threading;
using System.Net.Http;
using System.Threading.Tasks;
using System.Net.Http.Headers;
{{^generalClientClasses}}
using {{packageName}}.Services;
{{/generalClientClasses}}
{{#generalClientClasses}}
using {{GeneralClientClassesNamespace}}.GeneralClient;
using {{GeneralClientClassesNamespace}}.Services;
{{/generalClientClasses}}


namespace {{packageName}}.{{apiPackage}}
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}}
    {
        #region Asynchronous Operations
        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="HttpApiException">Thrown when fails to make API call or when server fails</exception>
        /// <exception cref="HttpServiceException">Thrown when network fails</exception>
        /// <exception cref="Exception">Application exception of any type derived from System.Exception or any exception that 'exceptionFactory' can generate</exception>
        /// <exception cref="TaskCanceledException">If operation has been canceled</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>Task of {{#returnType}}{{^isRetTypeStreamAtGetOp}}{{{returnType}}}{{/isRetTypeStreamAtGetOp}}{{#isRetTypeStreamAtGetOp}}IResponceStreamProvider{{/isRetTypeStreamAtGetOp}}{{/returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#returnType}}System.Threading.Tasks.Task<{{^isRetTypeStreamAtGetOp}}{{{returnType}}}{{/isRetTypeStreamAtGetOp}}{{#isRetTypeStreamAtGetOp}}IResponceStreamProvider{{/isRetTypeStreamAtGetOp}}>{{/returnType}}{{^returnType}}System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#allParams.0}},{{/allParams.0}} CancellationToken cancelToken = default(CancellationToken));
        
        {{#bodyParam}}
        {{#isBodyParamBinaryOrGenerateGZipContent}}
         /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="HttpApiException">Thrown when fails to make API call or when server fails</exception>
        /// <exception cref="HttpServiceException">Thrown when network fails</exception>
        /// <exception cref="Exception">Application exception of any type derived from System.Exception or any exception that 'exceptionFactory' can generate</exception>
        /// <exception cref="TaskCanceledException">If operation has been canceled</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        {{#returnType}}System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{^isBodyParam}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{/isBodyParam}}{{#isBodyParam}}IReadableStreamProvider {{paramName}}{{/isBodyParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#allParams.0}},{{/allParams.0}} CancellationToken cancelToken = default(CancellationToken), String contentType = null);
        {{/isBodyParamBinaryOrGenerateGZipContent}}
        {{/bodyParam}}

        {{#GenerateGZipContentOperation}}
        {{^bodyParamIsBinary}}
        {{#bodyParam}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="HttpApiException">Thrown when fails to make API call or when server fails</exception>
        /// <exception cref="HttpServiceException">Thrown when network fails</exception>
        /// <exception cref="Exception">Application exception of any type derived from System.Exception or any exception that 'exceptionFactory' can generate</exception>
        /// <exception cref="TaskCanceledException">If operation has been canceled</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>Task of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#returnType}}System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}System.Threading.Tasks.Task{{/returnType}} {{operationId}}GZippedAsync ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#allParams.0}},{{/allParams.0}} CancellationToken cancelToken = default(CancellationToken));
        {{/bodyParam}}
        {{/bodyParamIsBinary}}
        {{/GenerateGZipContentOperation}}

        {{/operation}}
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} partial class {{classname}} : {{interfacePrefix}}{{classname}}
    {
        private HttpExceptionFactory _exceptionFactory = (response) => null;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public {{classname}}({{packageName}}.Client.HttpConfiguration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = {{packageName}}.Client.HttpConfiguration.Default;
            else
                this.Configuration = configuration;

            ResponseChecker = {{packageName}}.Client.HttpConfiguration.DefaultResponseCheckerMethod;
            ExceptionFactory = {{packageName}}.Client.HttpConfiguration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }        

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public {{packageName}}.Client.HttpConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HttpExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides a method to check response for an error
        /// </summary>
        public Func<string, HttpResponseMessage, bool> ResponseChecker
        {
            get;            
            set;
        }
        
        {{#operation}}

        {{#bodyParam}}
        {{#isBodyParamBinaryOrGenerateGZipContent}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="HttpApiException">Thrown when fails to make API call or when server fails</exception>
        /// <exception cref="HttpServiceException">Thrown when network fails</exception>
        /// <exception cref="Exception">Application exception of any type derived from System.Exception or any exception that 'exceptionFactory' can generate</exception>
        /// <exception cref="TaskCanceledException">If operation has been canceled</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        {{#returnType}}public async System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}public async System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{^isBodyParam}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{/isBodyParam}}{{#isBodyParam}}IReadableStreamProvider {{paramName}}{{/isBodyParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#allParams.0}},{{/allParams.0}} CancellationToken cancelToken = default(CancellationToken), String contentType = null)
        {
            {{#allParams}}
            {{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new HttpApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");
            {{/required}}
            {{/allParams}}

            var localVarPath = $"{{#lambda.remove_initial_forwardslash}}{{{path}}}{{/lambda.remove_initial_forwardslash}}";
            List<KeyValuePair<String, String>> localVarQueryParams = null;
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                {{#consumes}}
                "{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}
                {{/consumes}}
            };
           
            if (String.IsNullOrWhiteSpace(contentType))
            {
                contentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            }
            
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                {{#produces}}
                "{{{mediaType}}}"{{#hasMore}},{{/hasMore}}
                {{/produces}}
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            {{#queryParams.0}}
            localVarQueryParams = new List<KeyValuePair<String, String>>();
            {{/queryParams.0}}
            {{#queryParams}}
            if ({{paramName}} != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}", "{{baseName}}", {{paramName}})); // query parameter
            {{/queryParams}}            

            {{#headerParams}}
            if ({{paramName}} != null) localVarHeaderParams.Add("{{baseName}}", this.Configuration.ApiClient.ParameterToString({{paramName}})); // header parameter
            {{/headerParams}}

            {{#authMethods}}
            // authentication ({{name}}) required            
            {{#isApiKey}}
            {{#isKeyInHeader}}
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarHeaderParams["{{keyParamName}}"] = this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            }
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                if (localVarQueryParams == null)
                    localVarQueryParams = new List<KeyValuePair<String, String>>();                    
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            {{/isBasic}}
            {{#isOAuth}}
            // oauth required
            IAuthService authSrv = this.Configuration.AuthService;
            {{/isOAuth}}
            {{/authMethods}}            

            if (localVarQueryParams?.Count > 0)
            {
                 localVarPath = this.Configuration.ApiClient.GeneratePathAndQuery("{{{path}}}", localVarQueryParams);
            }

            StreamContent {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent = new StreamContent({{#bodyParam}}{{paramName}}{{/bodyParam}}.Stream);
             {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent.Headers.Add("Content-Type", contentType);
            if ({{#bodyParam}}{{paramName}}{{/bodyParam}}.IsContentInGzip)
                {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent.Headers.Add("Content-Encoding", "gzip, deflate");

            try {

                Func<HttpClient, Task<HttpResponseMessage>> sendAction = (client) =>
                {
                    return client.{{httpMethod}}Async(localVarPath, {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent, cancelToken);
                };

                {{#returnType}}
                {{{returnType}}} resultValue = default({{{returnType}}});            
                Func<HttpClient, HttpResponseMessage, Task<bool>> proccessResponce = async (client, response) =>
                {
                    // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                    resultValue = await response.Content.ReadAsAsync<{{{returnType}}}>();
                    return true;
                };
                {{/returnType}}
                {{^returnType}}
                Func<HttpClient, HttpResponseMessage, Task<bool>> proccessResponce = null;
                {{/returnType}}


                HttpExceptionFactory customEF = null;
                {{#responses.0}}
                {{^defaultResponceTreatsAsOnlyOneErrorDescription}}
                {{#operationContainsAtLeastOneErrorResponce}}
                customEF = async (response) => 
                {
                    {{#responses}}
                    {{#isResponseAnError}}
                    {{^isCodeDefault}}
                    {{#dataType}}
                    if ((int)response.StatusCode == {{code}})
                    {
                        // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                        var contentWithError{{code}} = await response.Content.ReadAsAsync<{{dataType}}>();
                        return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", contentWithError{{code}});
                    }
                    {{/dataType}}
                    {{^dataType}}
                    {{#message}}
                    if ((int)response.StatusCode == {{code}})
                    {
                        return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", "{{message}}");
                    }
                    {{/message}}                
                    {{/dataType}}
                    {{/isCodeDefault}}
                    {{/isResponseAnError}}
                    {{/responses}}

                    {{^defaultResponseTreatedAsError}}
                    return await ExceptionFactory(response);
                    {{/defaultResponseTreatedAsError}}
                    {{#defaultResponseTreatedAsError}}
                    {{#responses}}
                    {{#isCodeDefault}}
                    {{#dataType}}
                    // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                    var contentWithError = await response.Content.ReadAsAsync<{{dataType}}>();
                    return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", contentWithError);
                    {{/dataType}}
                    {{^dataType}}
                    {{#message}}
                    return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", "{{message}}");
                    {{/message}}                
                    {{/dataType}}
                    {{/isCodeDefault}}
                    {{/responses}}
                    {{/defaultResponseTreatedAsError}}
                };
                {{/operationContainsAtLeastOneErrorResponce}}
                {{/defaultResponceTreatsAsOnlyOneErrorDescription}} 
                {{/responses.0}}
                {{#defaultResponceTreatsAsOnlyOneErrorDescription}} 
                {{#responses}}
                {{#isCodeDefault}}
                {{#dataType}}
                customEF = async (response) => 
                {
                    // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                    var contentWithError = await response.Content.ReadAsAsync<{{dataType}}>();
                    return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", contentWithError);  
                };
                {{/dataType}}
                {{/isCodeDefault}}
                {{/responses}}
                {{/defaultResponceTreatsAsOnlyOneErrorDescription}}

                // make the HTTP request
                await this.Configuration.ApiClient.PerformExchange(
                    sendAction,
                    (response) =>
                    {
                        {{^defaultResponceTreatsAsOnlyOneErrorDescription}}
                        return ResponseChecker("{{operationId}}", response); 
                        {{/defaultResponceTreatsAsOnlyOneErrorDescription}}
                        {{#defaultResponceTreatsAsOnlyOneErrorDescription}}
                        {{#operationContainsOneDefaultResponce}}
                        return ResponseChecker("{{operationId}}", response); 
                        {{/operationContainsOneDefaultResponce}}
                        {{^operationContainsOneDefaultResponce}}
                        bool bRes = false;
                        {{#responses}}
                        {{^isCodeDefault}}
                        bRes |= (int)response.StatusCode == {{code}};
                        {{/isCodeDefault}}
                        {{/responses}}
                        return bRes;
                        {{/operationContainsOneDefaultResponce}}
                        {{/defaultResponceTreatsAsOnlyOneErrorDescription}}                    
                    },
                    proccessResponce,
                    localVarQueryParams,
                    localVarHeaderParams,
                    {{#authMethods}}
                    {{#isOAuth}}
                    authSrv,
                    {{/isOAuth}}
                    {{^isOAuth}}
                    null,
                    {{/isOAuth}}
                    {{/authMethods}}
                    {{^authMethods}}
                    null,
                    {{/authMethods}}
                    cancelToken,
                    customEF ?? ExceptionFactory,
                    true,
                    async () => 
                    {
                        {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent.Dispose();
                        await {{#bodyParam}}{{paramName}}{{/bodyParam}}.ReInitializeStream();
                        {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent = new StreamContent({{#bodyParam}}{{paramName}}{{/bodyParam}}.Stream);
                        if ({{#bodyParam}}{{paramName}}{{/bodyParam}}.IsContentInGzip)
                            {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent.Headers.Add("Content-Encoding", "gzip, deflate");
                    }
                );
                

                {{#returnType}}
                return resultValue;
                {{/returnType}}
                {{^returnType}}
                return ;
                {{/returnType}}           
            }                   // try  {  StreamContent {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent = new StreamContent({{#bodyParam}}{{paramName}}{{/bodyParam}});
            finally
            {
                {{#bodyParam}}{{paramName}}{{/bodyParam}}StreamContent?.Dispose();
            }
        }
        {{/isBodyParamBinaryOrGenerateGZipContent}}
        {{/bodyParam}}
        
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="HttpApiException">Thrown when fails to make API call or when server fails</exception>
        /// <exception cref="HttpServiceException">Thrown when network fails</exception>
        /// <exception cref="Exception">Application exception of any type derived from System.Exception or any exception that 'exceptionFactory' can generate</exception>
        /// <exception cref="TaskCanceledException">If operation has been canceled</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{^isRetTypeStreamAtGetOp}}{{{returnType}}}{{/isRetTypeStreamAtGetOp}}{{#isRetTypeStreamAtGetOp}}IResponceStreamProvider{{/isRetTypeStreamAtGetOp}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        {{#returnType}}public async System.Threading.Tasks.Task<{{^isRetTypeStreamAtGetOp}}{{{returnType}}}{{/isRetTypeStreamAtGetOp}}{{#isRetTypeStreamAtGetOp}}IResponceStreamProvider{{/isRetTypeStreamAtGetOp}}>{{/returnType}}{{^returnType}}public async System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#allParams.0}},{{/allParams.0}} CancellationToken cancelToken = default(CancellationToken))
        {
            {{#allParams}}
            {{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new HttpApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");
            {{/required}}
            {{/allParams}}

            var localVarPath = $"{{#lambda.remove_initial_forwardslash}}{{{path}}}{{/lambda.remove_initial_forwardslash}}";
            List<KeyValuePair<String, String>> localVarQueryParams = null;
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                {{#consumes}}
                "{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}
                {{/consumes}}
            };
           
            {{^formParams.0}}
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            {{/formParams.0}}
             {{! ------------- FORM REGION ------------- }}
            {{#formParams.0}}
            bool isContentMultipartFormData = localVarHttpContentTypes.Contains("multipart/form-data");
            bool isContentFormUrlencoded = localVarHttpContentTypes.Contains("application/x-www-form-urlencoded");
            {{/formParams.0}}
            {{! --------------------------------------- }}

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                {{#produces}}
                "{{{mediaType}}}"{{#hasMore}},{{/hasMore}}
                {{/produces}}
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            {{#queryParams.0}}
            localVarQueryParams = new List<KeyValuePair<String, String>>();
            {{/queryParams.0}}
            {{#queryParams}}
            if ({{paramName}} != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}", "{{baseName}}", {{paramName}})); // query parameter
            {{/queryParams}}            

            {{#headerParams}}
            if ({{paramName}} != null) localVarHeaderParams.Add("{{baseName}}", this.Configuration.ApiClient.ParameterToString({{paramName}})); // header parameter
            {{/headerParams}}

            {{#authMethods}}
            // authentication ({{name}}) required            
            {{#isApiKey}}
            {{#isKeyInHeader}}
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarHeaderParams["{{keyParamName}}"] = this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            }
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                if (localVarQueryParams == null)
                    localVarQueryParams = new List<KeyValuePair<String, String>>();                    
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            {{/isBasic}}
            {{#isOAuth}}
            // oauth required
            IAuthService authSrv = this.Configuration.AuthService;
            {{/isOAuth}}
            {{/authMethods}}            
            
            {{! ------------- FORM REGION ------------- }}
            {{#formParams.0}}
            IFormDataBuilder formDataBuilder = null;            
            
            MultipartFormDataContentBuilder multipartContentBuilder = null;           {{! it is going to be used if body type is multipart/form-data}}
            FormUrlEncodedContentBuilder formUrlEncodedContentBuilder = null;     {{! it is going to be used if body type is application/x-www-form-urlencoded}}
            if (isContentMultipartFormData || (!isContentMultipartFormData && !isContentFormUrlencoded))
            {
                multipartContentBuilder = new MultipartFormDataContentBuilder();
                formDataBuilder = multipartContentBuilder;
            }
            else
            {
                formUrlEncodedContentBuilder = new FormUrlEncodedContentBuilder();
                formDataBuilder = formUrlEncodedContentBuilder;
            }
            {{/formParams.0}}
            {{#formParams}}
            if ({{paramName}} != null)
            {{#isFile}}
            {
                if (multipartContentBuilder != null)
                {
                    multipartContentBuilder.AddPart("{{baseName}}", {{paramName}});
                }
            }
            {{/isFile}}
            {{^isFile}}
            {
                if (multipartContentBuilder != null)
                {
                    multipartContentBuilder.AddPart("{{baseName}}", {{paramName}});
                }
                else
                {
                    {{#isString}}
                    formUrlEncodedContentBuilder.AddPart("{{baseName}}", {{paramName}});
                    {{/isString}}
                }
            }
            {{/isFile}}
            {{/formParams}}
            {{#formParams.0}}            
            try 
            {
            {{/formParams.0}}
            {{! ---------------------------------------- }}

            if (localVarQueryParams?.Count > 0)
            {
                 localVarPath = this.Configuration.ApiClient.GeneratePathAndQuery("{{{path}}}", localVarQueryParams);
            }

            {{#bodyParam}}  {{! if body parameter exists and body parameter type is the binary type - lets represent the parameter in the form of an http stream }}
            {{#isBinary}}
            StreamContent {{paramName}}StreamContent = new StreamContent({{paramName}});
            try {
            {{/isBinary}}
            {{/bodyParam}}

            Func<HttpClient, Task<HttpResponseMessage>> sendAction = (client) =>
            {
                {{#bodyParam}}  {{! if body parameter exists - use it }}
                {{^isBinary}}   {{! if body parameter type is not the binary type - send it as is}}
                return client.{{httpMethod}}Async(localVarPath, {{paramName}}, cancelToken);
                {{/isBinary}}
                {{#isBinary}}   {{! if body parameter type is the binary type - send it as HttpContent}}                
                return client.{{httpMethod}}Async(localVarPath, {{paramName}}StreamContent, cancelToken);
                {{/isBinary}}
                {{/bodyParam}}
                {{^bodyParam}}  {{! if body parameter doesn't exist }}
                {{^formParams}} {{! and if request parameter type is not the form type (and is not a body param) - with a high probability we already have processed it (for example as query param...), just skip it now }}
                {{^isRetTypeStreamAtGetOp}}return client.{{httpMethod}}Async(localVarPath, cancelToken);{{/isRetTypeStreamAtGetOp}}
                {{#isRetTypeStreamAtGetOp}} {{! currently only 'GET' supports this feature, and therefore HTTP/1.1 specification (sectiona 4.3 https://tools.ietf.org/html/rfc2616#section-4.3, 9.3 https://tools.ietf.org/html/rfc2616#section-9.3) strongly discourages using a body in 'GET' operation, assume that all 'GET' operations don't have a body }}
                return client.{{httpMethod}}Async(localVarPath, cancelToken, System.Net.Http.HttpCompletionOption.ResponseHeadersRead);{{/isRetTypeStreamAtGetOp}}
                {{/formParams}}
                {{#formParams.0}}   {{! if this request is some type of form data }}
                return client.{{httpMethod}}Async(localVarPath, formDataBuilder.CreateFormData() , cancelToken);{{/formParams.0}}{{/bodyParam}}
            };

            {{#returnType}}            
            {{^isRetTypeStreamAtGetOp}} 
            {{{returnType}}} resultValue = default({{{returnType}}});
            {{/isRetTypeStreamAtGetOp}}
            {{#isRetTypeStreamAtGetOp}} 
            IResponceStreamProvider resultValue = null;
            {{/isRetTypeStreamAtGetOp}}
            Func<HttpClient, HttpResponseMessage, Task<bool>> proccessResponce = async (client, response) =>
            {
                {{^isRetTypeStreamAtGetOp}}
                // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                resultValue = await response.Content.ReadAsAsync<{{{returnType}}}>();
                return true;
                {{/isRetTypeStreamAtGetOp}}
                {{#isRetTypeStreamAtGetOp}}
                var contentStream = await response.Content.ReadAsStreamAsync();
                resultValue = new HttpClientResponceStreamProvider(client, response, contentStream, this.Configuration.ClientPool);
                return false;
                {{/isRetTypeStreamAtGetOp}}
            };
            {{/returnType}}
            {{^returnType}}
            Func<HttpClient, HttpResponseMessage, Task<bool>> proccessResponce = null;
            {{/returnType}}

            
            HttpExceptionFactory customEF = null;
            {{#responses.0}}
            {{^defaultResponceTreatsAsOnlyOneErrorDescription}}
            {{#operationContainsAtLeastOneErrorResponce}}
            customEF = async (response) => 
            {
                {{#responses}}
                {{#isResponseAnError}}
                {{^isCodeDefault}}
                {{#dataType}}
                if ((int)response.StatusCode == {{code}})
                {
                    // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                    var contentWithError{{code}} = await response.Content.ReadAsAsync<{{dataType}}>();
                    return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", contentWithError{{code}});
                }
                {{/dataType}}
                {{^dataType}}
                {{#message}}
                if ((int)response.StatusCode == {{code}})
                {
                    return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", "{{message}}");
                }
                {{/message}}
                {{/dataType}}
                {{/isCodeDefault}}
                {{/isResponseAnError}}
                {{/responses}}
                {{^defaultResponseTreatedAsError}}
                return await ExceptionFactory(response);
                {{/defaultResponseTreatedAsError}}
                {{#defaultResponseTreatedAsError}}
                {{#responses}}
                {{#isCodeDefault}}
                {{#dataType}}
                // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                var contentWithError = await response.Content.ReadAsAsync<{{dataType}}>();
                return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", contentWithError); 
                {{/dataType}}
                {{^dataType}}
                {{#message}}
                return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", "{{message}}");
                {{/message}}                
                {{/dataType}}
                {{/isCodeDefault}}
                {{/responses}}
                {{/defaultResponseTreatedAsError}}
            };
            {{/operationContainsAtLeastOneErrorResponce}}
            {{/defaultResponceTreatsAsOnlyOneErrorDescription}} 
            {{/responses.0}}
            {{#defaultResponceTreatsAsOnlyOneErrorDescription}} 
            {{#responses}}
            {{#isCodeDefault}}
            {{#dataType}}
            customEF = async (response) => 
            {
                // TODO: need to make cancelable, ReadAsAsync is not cancelable by default
                var contentWithError = await response.Content.ReadAsAsync<{{dataType}}>();
                return new HttpApiException((int)response.StatusCode, $"Error calling {response.RequestMessage?.RequestUri}. Status {response.StatusCode}", contentWithError);  
            };
            {{/dataType}}
            {{/isCodeDefault}}
            {{/responses}}
            {{/defaultResponceTreatsAsOnlyOneErrorDescription}}

            // make the HTTP request
            await this.Configuration.ApiClient.PerformExchange(
                sendAction,
                (response) =>
                {
                    {{^defaultResponceTreatsAsOnlyOneErrorDescription}}
                    return ResponseChecker("{{operationId}}", response); 
                    {{/defaultResponceTreatsAsOnlyOneErrorDescription}}
                    {{#defaultResponceTreatsAsOnlyOneErrorDescription}}
                    {{#operationContainsOneDefaultResponce}}
                    return ResponseChecker("{{operationId}}", response); 
                    {{/operationContainsOneDefaultResponce}}
                    {{^operationContainsOneDefaultResponce}}
                    bool bRes = false;
                    {{#responses}}
                    {{^isCodeDefault}}
                    bRes |= (int)response.StatusCode == {{code}};
                    {{/isCodeDefault}}
                    {{/responses}}
                    return bRes;
                    {{/operationContainsOneDefaultResponce}}
                    {{/defaultResponceTreatsAsOnlyOneErrorDescription}}                    
                },
                proccessResponce,
                localVarQueryParams,
                localVarHeaderParams,
                {{#authMethods}}
                {{#isOAuth}}
                authSrv,
                {{/isOAuth}}
                {{^isOAuth}}
                null,
                {{/isOAuth}}
                {{/authMethods}}
                {{^authMethods}}
                null,
                {{/authMethods}}
                cancelToken,
                customEF ?? ExceptionFactory{{#formParams.0}},
                formDataBuilder.CanDataBeCreatedMultitimes {{! retriable state depends from from the content of form data }}
                {{/formParams.0}}{{^formParams.0}}{{#bodyParamIsBinary}},
                false{{/bodyParamIsBinary}} {{! if body param is binary - request can't be repeated}}
                {{/formParams.0}});
            

            {{#returnType}}
            return resultValue;
            {{/returnType}}
            {{^returnType}}
            return ;
            {{/returnType}}

            {{#formParams.0}}
            }                   // try  {  {{!/formParams.0}}
            finally
            {
                formDataBuilder.Dispose();
            }
            {{/formParams.0}}
            {{#bodyParam}}  {{! if body parameter exists and body parameter type is the binary type - dispose created http stream }}
            {{#isBinary}}
            }                   // try  {  StreamContent {{paramName}}StreamContent = new StreamContent({{paramName}});
            finally
            {
                {{paramName}}StreamContent?.Dispose();
            }
            {{/isBinary}}
            {{/bodyParam}}

        }


        {{#GenerateGZipContentOperation}}
        {{#bodyParam}}
        {{^bodyParamIsBinary}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="HttpApiException">Thrown when fails to make API call or when server fails</exception>
        /// <exception cref="HttpServiceException">Thrown when network fails</exception>
        /// <exception cref="Exception">Application exception of any type derived from System.Exception or any exception that 'exceptionFactory' can generate</exception>
        /// <exception cref="TaskCanceledException">If operation has been canceled</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        {{#returnType}}public async System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}public async System.Threading.Tasks.Task{{/returnType}} {{operationId}}GZippedAsync ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#allParams.0}},{{/allParams.0}} CancellationToken cancelToken = default(CancellationToken))
        {
            GZippedStreamProvider gzippedStreamProvider = null;
            try
            {
                {{^formParams.0}}
                gzippedStreamProvider = new JsonObjectGZippedStream<{{{dataType}}}>({{{paramName}}});
                String contentType = "application/json";
                {{/formParams.0}}
                {{! ------------- FORM REGION ------------- }}
                {{#formParams.0}}
                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    {{#consumes}}
                    "{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}
                    {{/consumes}}
                };

                bool isContentMultipartFormData = localVarHttpContentTypes.Contains(HttpApiCient.StandartMultipartFormData);
                bool isContentFormUrlencoded = localVarHttpContentTypes.Contains(HttpApiCient.NonStandartFormEncodedData);
                
                IFormDataBuilder formDataBuilder = null;            
                
                MultipartFormDataContentBuilder multipartContentBuilder = null;             {{! it is going to be used if body type is multipart/form-data}}
                FormUrlEncodedContentBuilder formUrlEncodedContentBuilder = null;           {{! it is going to be used if body type is application/x-www-form-urlencoded}}
                if (isContentMultipartFormData || (!isContentMultipartFormData && !isContentFormUrlencoded))
                {
                    multipartContentBuilder = new MultipartFormDataContentBuilder();
                    formDataBuilder = multipartContentBuilder;
                    contentType = HttpApiCient.StandartMultipartFormData;
                }
                else
                {
                    formUrlEncodedContentBuilder = new FormUrlEncodedContentBuilder();
                    formDataBuilder = formUrlEncodedContentBuilder;
                    contentType = HttpApiCient.NonStandartFormEncodedData;
                }
                
                {{#formParams}}
                if ({{paramName}} != null)
                {{#isFile}}
                {
                    if (multipartContentBuilder != null)
                    {
                        multipartContentBuilder.AddPart("{{baseName}}", {{paramName}});
                    }
                }
                {{/isFile}}
                {{^isFile}}
                {
                    if (multipartContentBuilder != null)
                    {
                        multipartContentBuilder.AddPart("{{baseName}}", {{paramName}});
                    }
                    else
                    {
                        {{#isString}}
                        formUrlEncodedContentBuilder.AddPart("{{baseName}}", {{paramName}});
                        {{/isString}}
                    }
                }
                {{/isFile}}
                {{/formParams}}
                gzippedStreamProvider = new FormDataGZipStreamProvider(multipartContentBuilder ?? formUrlEncodedContentBuilder);
                {{/formParams.0}}
                {{! ---------------------------------------- }}

                {{#returnType}}return{{/returnType}} await {{operationId}}Async({{#allParams}}{{#isBodyParam}}{{paramName}}:gzippedStreamProvider{{/isBodyParam}}{{^isBodyParam}}{{paramName}}:{{paramName}}{{/isBodyParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#allParams.0}},{{/allParams.0}}cancelToken:cancelToken, contentType:contentType);
            }
            finally
            {
                gzippedStreamProvider?.Dispose();
            }
        }
        {{/bodyParamIsBinary}}
        {{/bodyParam}}
        {{/GenerateGZipContentOperation}}
        
        {{/operation}}
    }
    {{/operations}}
}
