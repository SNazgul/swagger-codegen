using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;
{{^generalClientClasses}}using {{packageName}}.Services;{{/generalClientClasses}}
{{#generalClientClasses}}using {{GeneralClientClassesNamespace}}.Services;{{/generalClientClasses}}
using Newtonsoft.Json;

namespace {{^generalClientClasses}}{{packageName}}.Client{{/generalClientClasses}}{{#generalClientClasses}}{{GeneralClientClassesNamespace}}.GeneralClient{{/generalClientClasses}}
{
    public class JsonObjectGZippedStream<T> : GZippedStreamProvider
    {
        T _obj;
        MemoryStream _jsonRepresentation;
        StreamWriter _streamWriter;

        public JsonObjectGZippedStream(T obj)
        {
            _obj = obj;
        }


        protected override Stream GetStreamInternal()
        {
            if (_jsonRepresentation == null)
            {
                _jsonRepresentation = new MemoryStream();
                _streamWriter = new StreamWriter(_jsonRepresentation);

                using (JsonTextWriter jsonWriter = new JsonTextWriter(_streamWriter))
                {
                    jsonWriter.CloseOutput = false;
                    JsonSerializer ser = new JsonSerializer();
                    ser.Serialize(jsonWriter, _obj);
                    jsonWriter.Flush();
                }

                _jsonRepresentation.Position = 0;
            }

            return _jsonRepresentation;
        }

        protected override Task ReInitializeStreamInternal()
        {
            if (_jsonRepresentation != null)
                _jsonRepresentation.Position = 0;
            return Task.CompletedTask;
        }

        #region IDisposable Support
        private bool _disposedValue = false; // To detect redundant calls

        protected override void Dispose(bool disposing)
        {
            if (!_disposedValue)
            {
                if (disposing)
                {
                    _jsonRepresentation?.Dispose();
                    _jsonRepresentation = null;

                    _streamWriter?.Dispose();
                    _streamWriter = null;
                }

                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.

                _disposedValue = true;
            }

            base.Dispose(disposing);
        }

        #endregion
    }
}
