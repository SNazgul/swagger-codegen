using System.IO;
using System.Net.Http;

namespace {{^generalClientClasses}}{{packageName}}.Client{{/generalClientClasses}}{{#generalClientClasses}}{{GeneralClientClassesNamespace}}.GeneralClient{{/generalClientClasses}}
{
    public class HttpClientResponceStreamProvider : IResponceStreamProvider
    {
        HttpClient _httpClient;
        HttpResponseMessage _responceMsg;
        Stream _responceStream;
        IHttpClientPool _clientPool;

        public HttpClientResponceStreamProvider(HttpClient httpClient, HttpResponseMessage responceMsg, Stream responceStream,
            IHttpClientPool httpClientPool)
        {
            _httpClient = httpClient;
            _responceMsg = responceMsg;
            _responceStream = responceStream;
            _clientPool = httpClientPool;
        }

        public Stream Stream => _responceStream;

        #region IDisposable Support
        private bool _disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposedValue)
            {
                if (disposing)
                {
                    _responceStream?.Dispose();
                    _responceStream = null;

                    _responceMsg?.Dispose();
                    _responceMsg = null;

                    if (_httpClient != null)
                    {
                        _clientPool.FreeClient(_httpClient);
                        _httpClient = null;
                    }
                }               

                _disposedValue = true;
            }
        }
        

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);            
        }
        #endregion
    }
}
