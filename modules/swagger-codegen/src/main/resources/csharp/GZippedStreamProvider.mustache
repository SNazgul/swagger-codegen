using System;
using System.IO;
using System.IO.Compression;
using System.Net.Http;
using System.Threading.Tasks;
{{^generalClientClasses}}using {{packageName}}.Services;{{/generalClientClasses}}
{{#generalClientClasses}}using {{GeneralClientClassesNamespace}}.Services;{{/generalClientClasses}}

namespace {{^generalClientClasses}}{{packageName}}.Client{{/generalClientClasses}}{{#generalClientClasses}}{{GeneralClientClassesNamespace}}.GeneralClient{{/generalClientClasses}}
{
    public abstract class GZippedStreamProvider : IReadableStreamProvider, IDisposable
    {
        Stream _gzippedStream;
        string _tempFileName;
        const int InMemoryStreamLimit = 10 * 1024 * 1024;

        public bool IsContentInGzip => true;

        public virtual Stream Stream
        {
            get
            {
                if (_gzippedStream == null)
                {
                    CreateGZipStream();
                }
                return _gzippedStream;
            }
        }

        private void CreateGZipStream()
        {
            var stream = GetStreamInternal();
            long streamLength = -1;
            try { streamLength = stream.Length; }
            catch { }
            if (streamLength > InMemoryStreamLimit)
            {
                try { _tempFileName = System.IO.Path.GetTempFileName(); }
                catch { }
            }

            dynamic gzippedStream;
            if (_tempFileName == null)
            {
                gzippedStream = new MemoryStream();
            }
            else
            {
                gzippedStream = new FileStream(_tempFileName, FileMode.OpenOrCreate);
            }
            
            var gzipStream = new GZipStream(gzippedStream, CompressionMode.Compress, true);
            stream.CopyTo(gzipStream);
            gzipStream.Flush();
            gzipStream.Dispose();

            if (_tempFileName != null)
            {
                gzippedStream.Flush();
            }

            gzippedStream.Position = 0;
            _gzippedStream = gzippedStream;
        }

        public virtual async Task ReInitializeStream()
        {
            _gzippedStream?.Dispose();
            _gzippedStream = null;
            if (_tempFileName != null)
            {
                _gzippedStream = new FileStream(_tempFileName, FileMode.Open);
            }
            else
            {
                await ReInitializeStreamInternal();
                CreateGZipStream();
            }
        }

        protected abstract Stream GetStreamInternal();

        protected abstract Task ReInitializeStreamInternal();

        #region IDisposable Support
        private bool _disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposedValue)
            {
                if (disposing)
                {
                    _gzippedStream?.Dispose();
                    _gzippedStream = null;

                    if (_tempFileName != null)
                    {
                        try { System.IO.File.Delete(_tempFileName); _tempFileName = null; } catch { };
                    }
                }

                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.

                _disposedValue = true;
            }
        }

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
        }
        #endregion
    }
}
